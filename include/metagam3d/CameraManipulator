#ifndef MG_CAMERA_MANIPULATOR_H
#define MG_CAMERA_MANIPULATOR_H

#include <boost/python.hpp>
#include <osg/ref_ptr>
#include <osg/Vec3d>
#include <osg/Matrixd>
#include <osg/Quat>
#include <osgGA/CameraManipulator>

namespace osgGA {
    class CameraManipulator;
}

namespace mg {

class Engine;
class StacklessChannel;

/*
 * Controller for camera movement able to notify Stackless about
 * completion
 */
class CameraManipulator: public osgGA::CameraManipulator {
public:
    CameraManipulator(Engine *engine);
    virtual const char* className() const { return "CameraManipulator"; }

    /* Notify script that motion has completed */
    void motionCompleted();

    /* Set notification channel where to deliver response about completed slide */
    void setChannel(StacklessChannel *channel);

    /* Start sliding */
    void slide(double interval, const osg::Vec3d &endPos, const osg::Vec3d &endLookAt);

protected:
    /* Reference to the engine */
    Engine *m_engine;

    /* Channel where to report result */
    StacklessChannel *m_channel;

    /* Whether motion is in progress */
    bool m_moving;

    /* Camera starting position */
    double m_startDistance;
    osg::Quat m_startRotation;
    osg::Vec3d m_startLookAt;
    double m_startTime;

    /* Camera target position */
    double m_stopDistance;
    osg::Quat m_stopRotation;
    osg::Vec3d m_stopLookAt;
    double m_stopTime;

    /* Current camera matrix */
    osg::Matrixd m_matrix;

    /* Get distance between eye and lookat at specified time */
    void getDistance(double &distance, double time) const;

    /* Get rotation at specified time */
    void getRotation(osg::Quat &rotation, double time) const;

    /* Get LookAt at specified time */
    void getLookAt(osg::Vec3d &lookAt, double time) const;

    /* Handle GUI events (including "FRAME" event) */
    virtual bool handle(const osgGA::GUIEventAdapter &ea, osgGA::GUIActionAdapter &us);

    /* Calculate camera matrix */
    void updateMatrix(double time);

    /* Matrix setters and getters */
    virtual void setByMatrix(const osg::Matrixd &matrix) { m_matrix.invert(matrix); }
    virtual void setByInverseMatrix(const osg::Matrixd &matrix) { m_matrix = matrix; }
    virtual osg::Matrixd getMatrix() const { return osg::Matrixd::inverse(m_matrix); }
    virtual osg::Matrixd getInverseMatrix() const { return m_matrix; }
};

} // namespace mg

#endif
